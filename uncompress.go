package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/exec"
	"strings"
)

func main() {
	c, _ := net.Dial("tcp", "irc.root-me.org:6667")
	text := [7]string{"PASS none\n", "NICK wbfrwkt\n", "USER wbfrwkt ircip1.mibbit.com ircip1.mibbit.com wbfrwkt\n", "privmsg candy !ep4\n"}
	resp := ""
	for _, j := range text {
		fmt.Fprintf(c, j)
		connbuf := bufio.NewReader(c)
		b, _ := connbuf.ReadByte()
		if connbuf.Buffered() > 0 {
			var msgData []byte
			msgData = append(msgData, b)
			for connbuf.Buffered() > 0 {
				b, err := connbuf.ReadByte()
				if err == nil {
					msgData = append(msgData, b)
				}
			}
			resp = string(msgData)
		}
		fmt.Println(resp)
		// newout := string(msgData)
		var hesh string
		if strings.Contains(resp, ":Candy!Candy@root-me.org") {
			s := strings.Split(resp, ":")
			//fmt.Println(s)
			hesh = s[2]
			// Output: [a b c]
			fmt.Println(hesh)
			var newhesh string
			for _, l1 := range hesh {
				if l1 != '\r' && l1 != '\n' {
					newhesh += string(l1)
				}
			}
			command := "echo " + string(newhesh) + " | base64 --decode | perl -e 'use Compress::Raw::Zlib;my $d=new Compress::Raw::Zlib::Inflate();my $o;undef $/;$d->inflate(<>,$o);print $o;'"

			res2, err := exec.Command("bash", "-c", command).CombinedOutput()
			if err != nil {
				os.Stderr.WriteString(err.Error())
			}
			fmt.Println(string(res2))
			res := "privmsg candy !ep4 -rep " + string(res2) + "\n"
			fmt.Println(res)
			fmt.Fprintf(c, res)
			resp2 := ""
			connbuf = bufio.NewReader(c)
			b, _ = connbuf.ReadByte()
			if connbuf.Buffered() > 0 {
				var msgData []byte
				msgData = append(msgData, b)
				for connbuf.Buffered() > 0 {
					b, err := connbuf.ReadByte()
					if err == nil {
						msgData = append(msgData, b)
					}
				}
				resp2 = string(msgData)
			}
			fmt.Println(resp2)
		}
	}
}
